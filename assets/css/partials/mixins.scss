@mixin user-select() {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin rotate($degrees) {
    webkit-transform: rotate($degrees);
    -moz-transform: rotate($degrees);
    -ms-transform: rotate($degrees);
    -o-transform: rotate($degrees);
    transform: rotate($degrees);
}

@mixin box-shadow($opacity:.20) {
    -webkit-box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, $opacity);
    -moz-box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, $opacity);
    box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, $opacity);
}

%flex {
    -webkit-display: flex;
    -moz-display: flex;
    -ms-display: flex;
    -o-display: flex;
    display: flex;
}

%box {
    background-color: $white;
    margin-bottom: $global-padding-default;
    @include box-shadow();
}

// Breakpoint
@mixin breakpoint($types...) {
    $minWidth: -1;
    $maxWidth: -1;

    /* 
        FLEXBOX GRID
        xs: 30em: 480px
        sm: 48em: 768px
        md: 64em: 1024px
        lg: 75em: 1200px
    */

    $map: ('0': 0,
            '970': 970px,
            '1280': 1280px,
            'xxs': 320px,
            'x':  375px,
            'xs': 480px,
            'sm': 768px,
            'md': 1024px,
            'lg': 1200px,
            'xl': 1440px,
            'xxl': 1600px
        );

    @each $type in $types {
        $i: index($types, $type);
        $value: #{inspect(map-get($map, $type))};

        @if map-has-key($map, $type) {
            // color#{$i}: #{inspect(map-get($map, $type))};

            @if $i==1 or map-get($map, $type)=='0' {
                $minWidth: #{inspect(map-get($map, $type))};
            }

            @else {
                $maxWidth: #{inspect(map-get($map, $type)-1)};
            }
        }

        @else {
            @warn '-------> OCHO! Non e\' presente nessun breakpoint data questa key.';
        }
    }

    // @debug '-------> minwidth: ' + $minWidth + ' | maxwidth: ' + $maxWidth;
    @if($maxWidth==-1) {
        @media (min-width: $minWidth) {
            @content;
        }
    }

    @else {
        @media (min-width: $minWidth) and (max-width: $maxWidth) {
            @content;
        }
    }
}